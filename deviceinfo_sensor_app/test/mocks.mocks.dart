// Mocks generated by Mockito 5.4.6 from annotations
// in deviceinfo_sensor_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:deviceinfo_sensor_app/platform/platform_interface.dart' as _i2;
import 'package:deviceinfo_sensor_app/platform/sensor_interface.dart' as _i3;
import 'package:deviceinfo_sensor_app/presentation/dashboard/dashboard_view_model.dart'
    as _i4;
import 'package:deviceinfo_sensor_app/presentation/sensor/sensor_view_model.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIDeviceInfoChannel_0 extends _i1.SmartFake
    implements _i2.IDeviceInfoChannel {
  _FakeIDeviceInfoChannel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeISensorChannel_1 extends _i1.SmartFake
    implements _i3.ISensorChannel {
  _FakeISensorChannel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DashboardViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardViewModel extends _i1.Mock
    implements _i4.DashboardViewModel {
  MockDashboardViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get loading =>
      (super.noSuchMethod(Invocation.getter(#loading), returnValue: false)
          as bool);

  @override
  String get battery =>
      (super.noSuchMethod(
            Invocation.getter(#battery),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#battery),
            ),
          )
          as String);

  @override
  String get deviceName =>
      (super.noSuchMethod(
            Invocation.getter(#deviceName),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#deviceName),
            ),
          )
          as String);

  @override
  String get osVersion =>
      (super.noSuchMethod(
            Invocation.getter(#osVersion),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#osVersion),
            ),
          )
          as String);

  @override
  _i2.IDeviceInfoChannel get deviceInfoChannel =>
      (super.noSuchMethod(
            Invocation.getter(#deviceInfoChannel),
            returnValue: _FakeIDeviceInfoChannel_0(
              this,
              Invocation.getter(#deviceInfoChannel),
            ),
          )
          as _i2.IDeviceInfoChannel);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
    Invocation.setter(#loading, _loading),
    returnValueForMissingStub: null,
  );

  @override
  set battery(String? _battery) => super.noSuchMethod(
    Invocation.setter(#battery, _battery),
    returnValueForMissingStub: null,
  );

  @override
  set deviceName(String? _deviceName) => super.noSuchMethod(
    Invocation.setter(#deviceName, _deviceName),
    returnValueForMissingStub: null,
  );

  @override
  set osVersion(String? _osVersion) => super.noSuchMethod(
    Invocation.setter(#osVersion, _osVersion),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> loadDeviceInfo() =>
      (super.noSuchMethod(
            Invocation.method(#loadDeviceInfo, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SensorViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensorViewModel extends _i1.Mock implements _i8.SensorViewModel {
  MockSensorViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ISensorChannel get sensorChannel =>
      (super.noSuchMethod(
            Invocation.getter(#sensorChannel),
            returnValue: _FakeISensorChannel_1(
              this,
              Invocation.getter(#sensorChannel),
            ),
          )
          as _i3.ISensorChannel);

  @override
  bool get flashlightOn =>
      (super.noSuchMethod(Invocation.getter(#flashlightOn), returnValue: false)
          as bool);

  @override
  String get gyroscope =>
      (super.noSuchMethod(
            Invocation.getter(#gyroscope),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#gyroscope),
            ),
          )
          as String);

  @override
  set flashlightOn(bool? _flashlightOn) => super.noSuchMethod(
    Invocation.setter(#flashlightOn, _flashlightOn),
    returnValueForMissingStub: null,
  );

  @override
  set gyroscope(String? _gyroscope) => super.noSuchMethod(
    Invocation.setter(#gyroscope, _gyroscope),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> toggleFlash(bool? on) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFlash, [on]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadGyroscope() =>
      (super.noSuchMethod(
            Invocation.method(#loadGyroscope, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
